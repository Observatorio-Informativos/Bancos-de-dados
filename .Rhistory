rename(VL_FOB_IMP=VL_FOB) # separando anos necessarios
imp_up<-imp_up%>%
filter(CO_ANO == ano_inic) %>% # separando anos necessarios
mutate(VL_FOB=as.numeric(VL_FOB)) %>%
mutate(SH4=as.factor(SH4)) %>%
mutate(SH4=str_sub(paste0(0,SH4),-4)) %>%
mutate(CO_PORTO=NULL) %>%
rename(VL_FOB_IMP=VL_FOB) # separando anos necessarios
#### Organizacao - Expancao Dados PCI, GitHub ####
# Expandindo PCI 2019 to 2020, 2021, 2022.
pci_db<-read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor",encoding = "UTF-8"))%>%
filter(CO_ANO==2019) %>%
#full_join(NCMee2)%>% #editado 26-05 (incluir NCM?)
rbind(
mutate(.,CO_ANO=2020),
mutate(.,CO_ANO=2021),
mutate(.,CO_ANO=2022),
mutate(.,CO_ANO=2023))%>%
filter(CO_ANO>2019) %>%
bind_rows(read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor")))%>%
group_by(CO_ANO) %>%
mutate(`Grau de Complexidade`=case_when(
pci <= min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) ~ "Baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*2 ~ "Média-baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *2 &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*3 ~ "Média-alta",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *3 ~ "Alta")) %>%
ungroup() %>%
select(SH4_N=HS4, SH4=HS4.ID, CO_ANO,`Grau de Complexidade`)
#### Organizacao - Dados CO_PAIS, GitHub ####
# Dados CO_PAIS
co_pais<-read.csv("https://raw.githubusercontent.com/Observatorio-Informativos/Bancos-de-dados/main/co_pais_mdic_.csv", encoding = "UTF-8")[,c(1,4)]%>%
rename("CO_PAIS"=1)%>%
mutate(CO_PAIS=as.numeric(as.character(CO_PAIS)))
#### Organizacao - Arrumando Bancos de Dados ####
#### SP trade
# 1.a Balanca de SP  desagregado por produto, municipio, ano, mes, destinos e origens
sp_exp<-exp_up %>%
filter(SG_UF_MUN=="SP")
sp_imp <- imp_up %>%
filter(SG_UF_MUN=='SP')
sp_trade <- sp_exp %>%
full_join(sp_imp) %>%
mutate(Mes = case_when(CO_MES ==1 ~ "JAN",
CO_MES ==2 ~ "FEV",
CO_MES ==3 ~ "MAR",
CO_MES ==4 ~ "ABR",
CO_MES ==5 ~ "MAI",
CO_MES ==6 ~ "JUN",
CO_MES ==7 ~ "JUL",
CO_MES ==8 ~ "AGO",
CO_MES ==9 ~ "SET",
CO_MES ==10 ~ "OUT",
CO_MES ==11 ~ "NOV",
CO_MES ==12 ~ "DEZ"),
`Mês/Ano` = paste0(Mes, "/", substring(CO_ANO, 3, 4))) # Mes e Ano organizado para remover datas manuais
#### Tracing RMC
sp_trade<- sp_trade %>% mutate(RMC=ifelse(CO_MUN==3401608|
CO_MUN==3403802|
CO_MUN==3409502|
CO_MUN==3412803|
CO_MUN==3415152|
CO_MUN==3419055|
CO_MUN==3419071|
CO_MUN==3420509|
CO_MUN==3423404|
CO_MUN==3424709|
CO_MUN==3431803|
CO_MUN==3432009|
CO_MUN==3433403|
CO_MUN==3436505|
CO_MUN==3437107|
CO_MUN==3445803|
CO_MUN==3448005|
CO_MUN==3452403|
CO_MUN==3456206|
CO_MUN==3456701, 1,0)) # Marcador para RMC em sp trade
tb1<- sp_trade %>%
filter(CO_MES==mes_num) %>%
group_by(CO_ANO, RMC, `Mês/Ano`) %>%
summarise_at(c("VL_FOB_EXP","VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
id_cols = c(CO_ANO, `Mês/Ano`),
names_from = RMC,
values_from = c("VL_FOB_EXP", "VL_FOB_IMP")) %>%
ungroup()%>%
# mutate(mes=mes_n)%>% # Datas manuais não utilizadas
# mutate(ano=substr(CO_ANO,3,4)) %>% # Datas manuais não utilizadas
# mutate(Periodo=paste0(mes,sep="/",ano))%>% # Datas manuais não utilizadas
mutate("Valor Exp."= round(VL_FOB_EXP_1/1000000,2)) %>%
mutate("% Exp. SP"= round(VL_FOB_EXP_1/(VL_FOB_EXP_1+VL_FOB_EXP_0),4)) %>%
mutate("Valor Imp."=round(VL_FOB_IMP_1/1000000,2)) %>%
mutate("% Imp. SP"=round(VL_FOB_IMP_1/(VL_FOB_IMP_1+VL_FOB_IMP_0),4)) %>%
mutate("Saldo RMC"=round((VL_FOB_EXP_1-VL_FOB_IMP_1)/1000000,2)) %>%
mutate("Saldo SP"=round(((VL_FOB_EXP_0+VL_FOB_EXP_1)-
(VL_FOB_IMP_0+VL_FOB_IMP_1))/1000000,2)) %>%
select(`Mês/Ano`, 7:12)
tb1$`% Exp. SP` = tb1$`% Exp. SP`*100
tb1$`% Exp. SP` = paste0(tb1$`% Exp. SP`, '%')
tb1$`% Imp. SP` = tb1$`% Imp. SP`*100
tb1$`% Imp. SP` = paste0(tb1$`% Imp. SP`, '%')
CresCompAnoAnteriorIMP <- round(((tb1[11, 4]- tb1[10, 4])/tb1[10,4])*100, digits = 2)
tb1<- sp_trade %>%
filter(CO_MES==mes_num) %>%
group_by(CO_ANO, RMC, `Mês/Ano`) %>%
summarise_at(c("VL_FOB_EXP","VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
id_cols = c(CO_ANO, `Mês/Ano`),
names_from = RMC,
values_from = c("VL_FOB_EXP", "VL_FOB_IMP")) %>%
ungroup()%>%
# mutate(mes=mes_n)%>% # Datas manuais não utilizadas
# mutate(ano=substr(CO_ANO,3,4)) %>% # Datas manuais não utilizadas
# mutate(Periodo=paste0(mes,sep="/",ano))%>% # Datas manuais não utilizadas
mutate("Valor Exp."= round(VL_FOB_EXP_1/1000000,2)) %>%
mutate("% Exp. SP"= round(VL_FOB_EXP_1/(VL_FOB_EXP_1+VL_FOB_EXP_0),4)) %>%
mutate("Valor Imp."=round(VL_FOB_IMP_1/1000000,2)) %>%
mutate("% Imp. SP"=round(VL_FOB_IMP_1/(VL_FOB_IMP_1+VL_FOB_IMP_0),4)) %>%
mutate("Saldo RMC"=round((VL_FOB_EXP_1-VL_FOB_IMP_1)/1000000,2)) %>%
mutate("Saldo SP"=round(((VL_FOB_EXP_0+VL_FOB_EXP_1)-
(VL_FOB_IMP_0+VL_FOB_IMP_1))/1000000,2)) %>%
select(`Mês/Ano`, 7:12)
tb1$`% Exp. SP` = tb1$`% Exp. SP`*100
tb1$`% Exp. SP` = paste0(tb1$`% Exp. SP`, '%')
tb1$`% Imp. SP` = tb1$`% Imp. SP`*100
tb1$`% Imp. SP` = paste0(tb1$`% Imp. SP`, '%')
View(tb1)
CresCompAnoAnteriorIMP <- round(((tb1[11, 4]- tb1[10, 4])/tb1[10,4])*100, digits = 2)
View(CresCompAnoAnteriorIMP)
tb1<- sp_trade %>%
filter(CO_MES==mes_num) %>%
group_by(CO_ANO, RMC, `Mês/Ano`) %>%
summarise_at(c("VL_FOB_EXP","VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
id_cols = c(CO_ANO, `Mês/Ano`),
names_from = RMC,
values_from = c("VL_FOB_EXP", "VL_FOB_IMP")) %>%
ungroup()#%>%
View(tb1)
tb1<- sp_trade %>%
filter(CO_MES==mes_num) #%>%
View(tb1)
# importando os dados do repositório de informativos
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/EXP_MUN_COMPLETA_SP.RData?raw=true"))
exp_up<-exp_up%>%
filter(CO_ANO >= ano_inic)%>%
mutate(VL_FOB=as.numeric(VL_FOB)) %>%
mutate(SH4=as.factor(SH4)) %>%
mutate(SH4=str_sub(paste0(0,SH4),-4)) %>%
mutate(CO_PORTO=NULL)%>%
rename(VL_FOB_EXP=VL_FOB) # separando anos necessarios
# IMP
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/IMP_MUN_COMPLETA_SP.RData?raw=true"))
imp_up<-imp_up%>%
filter(CO_ANO >= ano_inic) %>% # separando anos necessarios
mutate(VL_FOB=as.numeric(VL_FOB)) %>%
mutate(SH4=as.factor(SH4)) %>%
mutate(SH4=str_sub(paste0(0,SH4),-4)) %>%
mutate(CO_PORTO=NULL) %>%
rename(VL_FOB_IMP=VL_FOB) # separando anos necessarios
#### Organizacao - Expancao Dados PCI, GitHub ####
# Expandindo PCI 2019 to 2020, 2021, 2022.
pci_db<-read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor",encoding = "UTF-8"))%>%
filter(CO_ANO==2019) %>%
#full_join(NCMee2)%>% #editado 26-05 (incluir NCM?)
rbind(
mutate(.,CO_ANO=2020),
mutate(.,CO_ANO=2021),
mutate(.,CO_ANO=2022),
mutate(.,CO_ANO=2023))%>%
filter(CO_ANO>2019) %>%
bind_rows(read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor")))%>%
group_by(CO_ANO) %>%
mutate(`Grau de Complexidade`=case_when(
pci <= min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) ~ "Baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*2 ~ "Média-baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *2 &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*3 ~ "Média-alta",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *3 ~ "Alta")) %>%
ungroup() %>%
select(SH4_N=HS4, SH4=HS4.ID, CO_ANO,`Grau de Complexidade`)
#### Organizacao - Dados CO_PAIS, GitHub ####
# Dados CO_PAIS
co_pais<-read.csv("https://raw.githubusercontent.com/Observatorio-Informativos/Bancos-de-dados/main/co_pais_mdic_.csv", encoding = "UTF-8")[,c(1,4)]%>%
rename("CO_PAIS"=1)%>%
mutate(CO_PAIS=as.numeric(as.character(CO_PAIS)))
#### Organizacao - Arrumando Bancos de Dados ####
#### SP trade
# 1.a Balanca de SP  desagregado por produto, municipio, ano, mes, destinos e origens
sp_exp<-exp_up %>%
filter(SG_UF_MUN=="SP")
sp_imp <- imp_up %>%
filter(SG_UF_MUN=='SP')
sp_trade <- sp_exp %>%
full_join(sp_imp) %>%
mutate(Mes = case_when(CO_MES ==1 ~ "JAN",
CO_MES ==2 ~ "FEV",
CO_MES ==3 ~ "MAR",
CO_MES ==4 ~ "ABR",
CO_MES ==5 ~ "MAI",
CO_MES ==6 ~ "JUN",
CO_MES ==7 ~ "JUL",
CO_MES ==8 ~ "AGO",
CO_MES ==9 ~ "SET",
CO_MES ==10 ~ "OUT",
CO_MES ==11 ~ "NOV",
CO_MES ==12 ~ "DEZ"),
`Mês/Ano` = paste0(Mes, "/", substring(CO_ANO, 3, 4))) # Mes e Ano organizado para remover datas manuais
sp_trade <- sp_exp %>%
full_join(sp_imp) %>%
mutate(Mes = case_when(CO_MES ==1 ~ "JAN",
CO_MES ==2 ~ "FEV",
CO_MES ==3 ~ "MAR",
CO_MES ==4 ~ "ABR",
CO_MES ==5 ~ "MAI",
CO_MES ==6 ~ "JUN",
CO_MES ==7 ~ "JUL",
CO_MES ==8 ~ "AGO",
CO_MES ==9 ~ "SET",
CO_MES ==10 ~ "OUT",
CO_MES ==11 ~ "NOV",
CO_MES ==12 ~ "DEZ"),
`Mês/Ano` = paste0(Mes, "/", substring(CO_ANO, 3, 4))) # Mes e Ano organizado para remover datas manuais
#### Tracing RMC
sp_trade<- sp_trade %>% mutate(RMC=ifelse(CO_MUN==3401608|
CO_MUN==3403802|
CO_MUN==3409502|
CO_MUN==3412803|
CO_MUN==3415152|
CO_MUN==3419055|
CO_MUN==3419071|
CO_MUN==3420509|
CO_MUN==3423404|
CO_MUN==3424709|
CO_MUN==3431803|
CO_MUN==3432009|
CO_MUN==3433403|
CO_MUN==3436505|
CO_MUN==3437107|
CO_MUN==3445803|
CO_MUN==3448005|
CO_MUN==3452403|
CO_MUN==3456206|
CO_MUN==3456701, 1,0)) # Marcador para RMC em sp trade
tb1<- sp_trade %>%
filter(CO_MES==mes_num) %>%
group_by(CO_ANO, RMC, `Mês/Ano`) %>%
summarise_at(c("VL_FOB_EXP","VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
id_cols = c(CO_ANO, `Mês/Ano`),
names_from = RMC,
values_from = c("VL_FOB_EXP", "VL_FOB_IMP")) %>%
ungroup()%>%
# mutate(mes=mes_n)%>% # Datas manuais não utilizadas
# mutate(ano=substr(CO_ANO,3,4)) %>% # Datas manuais não utilizadas
# mutate(Periodo=paste0(mes,sep="/",ano))%>% # Datas manuais não utilizadas
mutate("Valor Exp."= round(VL_FOB_EXP_1/1000000,2)) %>%
mutate("% Exp. SP"= round(VL_FOB_EXP_1/(VL_FOB_EXP_1+VL_FOB_EXP_0),4)) %>%
mutate("Valor Imp."=round(VL_FOB_IMP_1/1000000,2)) %>%
mutate("% Imp. SP"=round(VL_FOB_IMP_1/(VL_FOB_IMP_1+VL_FOB_IMP_0),4)) %>%
mutate("Saldo RMC"=round((VL_FOB_EXP_1-VL_FOB_IMP_1)/1000000,2)) %>%
mutate("Saldo SP"=round(((VL_FOB_EXP_0+VL_FOB_EXP_1)-
(VL_FOB_IMP_0+VL_FOB_IMP_1))/1000000,2)) %>%
select(`Mês/Ano`, 7:12)
View(tb1)
View(sp_imp)
View(sp_exp)
# importando os dados do repositório de informativos
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/EXP_MUN_COMPLETA_SP.RData?raw=true"))
library(tidyverse)
library(knitr)
library(kableExtra)
library(scales)
library(formattable)
library(httr)
library(lubridate)
options(OutDec = ",")
#### Organizacao - Definir Mes e Ano referente ao boletim ####
mes_num<-1
ano_atual<-2023
ano_inic <- 2013
mes_nom<- "janeiro"
# importando os dados do repositório de informativos
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/EXP_MUN_COMPLETA_SP.RData?raw=true"))
exp_up<-exp_up%>%
filter(CO_ANO >= ano_inic)%>%
mutate(VL_FOB=as.numeric(VL_FOB)) %>%
mutate(SH4=as.factor(SH4)) %>%
mutate(SH4=str_sub(paste0(0,SH4),-4)) %>%
mutate(CO_PORTO=NULL)%>%
rename(VL_FOB_EXP=VL_FOB) # separando anos necessarios
# IMP
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/IMP_MUN_COMPLETA_SP.RData?raw=true"))
# IMP
load(url("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/IMP_MUN_COMPLETA_SP.RData?raw=true"))
imp_up<-imp_up%>%
filter(CO_ANO >= ano_inic) %>% # separando anos necessarios
mutate(VL_FOB=as.numeric(VL_FOB)) %>%
mutate(SH4=as.factor(SH4)) %>%
mutate(SH4=str_sub(paste0(0,SH4),-4)) %>%
mutate(CO_PORTO=NULL) %>%
rename(VL_FOB_IMP=VL_FOB) # separando anos necessarios
#### Organizacao - Expancao Dados PCI, GitHub ####
# Expandindo PCI 2019 to 2020, 2021, 2022.
pci_db<-read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor",encoding = "UTF-8"))%>%
filter(CO_ANO==2019) %>%
#full_join(NCMee2)%>% #editado 26-05 (incluir NCM?)
rbind(
mutate(.,CO_ANO=2020),
mutate(.,CO_ANO=2021),
mutate(.,CO_ANO=2022),
mutate(.,CO_ANO=2023))%>%
filter(CO_ANO>2019) %>%
bind_rows(read.csv("https://github.com/Observatorio-Informativos/Bancos-de-dados/blob/main/pci_hs07_rankings.csv?raw=true", colClasses = c("HS4.ID"="factor")))%>%
group_by(CO_ANO) %>%
mutate(`Grau de Complexidade`=case_when(
pci <= min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) ~ "Baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*2 ~ "Média-baixa",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *2 &
pci<= min(pci, na.rm = T)+((max(pci,na.rm = T)-min(pci,na.rm = T))/4)*3 ~ "Média-alta",
pci >min(pci,na.rm = T)+((max(pci,na.rm = T)-min(pci, na.rm = T))/4) *3 ~ "Alta")) %>%
ungroup() %>%
select(SH4_N=HS4, SH4=HS4.ID, CO_ANO,`Grau de Complexidade`)
#### Organizacao - Arrumando Bancos de Dados ####
#### SP trade
# 1.a Balanca de SP  desagregado por produto, municipio, ano, mes, destinos e origens
sp_exp<-exp_up %>%
filter(SG_UF_MUN=="SP")
sp_trade <- sp_exp %>%
full_join(sp_imp) %>%
mutate(Mes = case_when(CO_MES ==1 ~ "JAN",
CO_MES ==2 ~ "FEV",
CO_MES ==3 ~ "MAR",
CO_MES ==4 ~ "ABR",
CO_MES ==5 ~ "MAI",
CO_MES ==6 ~ "JUN",
CO_MES ==7 ~ "JUL",
CO_MES ==8 ~ "AGO",
CO_MES ==9 ~ "SET",
CO_MES ==10 ~ "OUT",
CO_MES ==11 ~ "NOV",
CO_MES ==12 ~ "DEZ"),
`Mês/Ano` = paste0(Mes, "/", substring(CO_ANO, 3, 4))) # Mes e Ano organizado para remover datas manuais
#### Organizacao - Arrumando Bancos de Dados ####
#### SP trade
# 1.a Balanca de SP  desagregado por produto, municipio, ano, mes, destinos e origens
sp_exp<-exp_up %>%
filter(SG_UF_MUN=="SP")
sp_imp <- imp_up %>%
filter(SG_UF_MUN=='SP')
sp_trade <- sp_exp %>%
full_join(sp_imp) %>%
mutate(Mes = case_when(CO_MES ==1 ~ "JAN",
CO_MES ==2 ~ "FEV",
CO_MES ==3 ~ "MAR",
CO_MES ==4 ~ "ABR",
CO_MES ==5 ~ "MAI",
CO_MES ==6 ~ "JUN",
CO_MES ==7 ~ "JUL",
CO_MES ==8 ~ "AGO",
CO_MES ==9 ~ "SET",
CO_MES ==10 ~ "OUT",
CO_MES ==11 ~ "NOV",
CO_MES ==12 ~ "DEZ"),
`Mês/Ano` = paste0(Mes, "/", substring(CO_ANO, 3, 4))) # Mes e Ano organizado para remover datas manuais
#### Tracing RMC
sp_trade<- sp_trade %>% mutate(RMC=ifelse(CO_MUN==3401608|
CO_MUN==3403802|
CO_MUN==3409502|
CO_MUN==3412803|
CO_MUN==3415152|
CO_MUN==3419055|
CO_MUN==3419071|
CO_MUN==3420509|
CO_MUN==3423404|
CO_MUN==3424709|
CO_MUN==3431803|
CO_MUN==3432009|
CO_MUN==3433403|
CO_MUN==3436505|
CO_MUN==3437107|
CO_MUN==3445803|
CO_MUN==3448005|
CO_MUN==3452403|
CO_MUN==3456206|
CO_MUN==3456701, 1,0)) # Marcador para RMC em sp trade
tb1<- sp_trade %>%
filter(CO_MES==mes_num) %>%
group_by(CO_ANO, RMC, `Mês/Ano`) %>%
summarise_at(c("VL_FOB_EXP","VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
id_cols = c(CO_ANO, `Mês/Ano`),
names_from = RMC,
values_from = c("VL_FOB_EXP", "VL_FOB_IMP")) %>%
ungroup()%>%
# mutate(mes=mes_n)%>% # Datas manuais não utilizadas
# mutate(ano=substr(CO_ANO,3,4)) %>% # Datas manuais não utilizadas
# mutate(Periodo=paste0(mes,sep="/",ano))%>% # Datas manuais não utilizadas
mutate("Valor Exp."= round(VL_FOB_EXP_1/1000000,2)) %>%
mutate("% Exp. SP"= round(VL_FOB_EXP_1/(VL_FOB_EXP_1+VL_FOB_EXP_0),4)) %>%
mutate("Valor Imp."=round(VL_FOB_IMP_1/1000000,2)) %>%
mutate("% Imp. SP"=round(VL_FOB_IMP_1/(VL_FOB_IMP_1+VL_FOB_IMP_0),4)) %>%
mutate("Saldo RMC"=round((VL_FOB_EXP_1-VL_FOB_IMP_1)/1000000,2)) %>%
mutate("Saldo SP"=round(((VL_FOB_EXP_0+VL_FOB_EXP_1)-
(VL_FOB_IMP_0+VL_FOB_IMP_1))/1000000,2)) %>%
select(`Mês/Ano`, 7:12)
View(tb1)
tb1$`% Exp. SP` = tb1$`% Exp. SP`*100
tb1$`% Exp. SP` = paste0(tb1$`% Exp. SP`, '%')
tb1$`% Imp. SP` = tb1$`% Imp. SP`*100
tb1$`% Imp. SP` = paste0(tb1$`% Imp. SP`, '%')
View(tb1)
CresCompAnoAnteriorIMP <- round(((tb1[11, 4]- tb1[10, 4])/tb1[10,4])*100, digits = 2)
CresCompAnoAnteriorEXP <- round(((tb1[11, 2]- tb1[10, 2])/tb1[10,2])*100, digits = 2)
CresCompAnoAnteriorSaldoBCom <- round(((tb1[11, 6]- tb1[10, 6])/tb1[10,6])*100, digits = 2)
PartImpEstadoSP <- tb1[11, 5]
PartExpEstadoSP <- tb1[11, 3]
tb1%>%
knitr::kable(caption = paste("Tabela 1 - Balança Comercial da RMC para os meses de",  mes_nom, "(valores em milhões de USD/FOB)"), digits = 2, align = rep('c', 7))%>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE, position = "left")%>%
column_spec(1, bold = T)
#or, bootstrap_options = "bordered"
# bootstrap_options = "hover"
# bootstrap_options = "condensed"
tb5<- sp_trade %>%
filter(CO_ANO==ano_atual-1 & CO_MES > mes_num |
CO_ANO==ano_atual & CO_MES <= mes_num |
CO_ANO==ano_atual-2 & CO_MES > mes_num |
CO_ANO==ano_atual-1 & CO_MES <= mes_num,
RMC == 1)  %>%
mutate(Periodo = case_when(CO_ANO==ano_atual-1 & CO_MES > mes_num | CO_ANO==ano_atual & CO_MES <= mes_num ~ "22/21",
CO_ANO == ano_atual-2 & CO_MES > mes_num | CO_ANO == ano_atual-1 & CO_MES <= mes_num ~ "21/20")) %>%
left_join(pci_db) %>%
group_by(SH4, SH4_N, `Grau de Complexidade`, Periodo) %>%
summarise_at(c("VL_FOB_EXP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
names_from = Periodo,
values_from = c("VL_FOB_EXP")) %>%
ungroup() %>%
mutate( NCM=SH4,
Produto=SH4_N,
`Valor Exp. 22`=round(`22/21`/1000000,2),
`Var. % 21/22`= round((`22/21`- `21/20`)/`21/20`,4)) %>%
select(NCM,Produto,
`Valor Exp. 22`,`Var. % 21/22`,
`Grau de Complexidade`)
tb5_new <- tb5[order(tb5$`Valor Exp. 22`, decreasing = TRUE), ]
# Adicionando porcentagens
tb5_new$`Var. % 21/22` = tb5_new$`Var. % 21/22`*100
tb5_new$`Var. % 21/22` = paste0(tb5_new$`Var. % 21/22`, '%')
#view(tb5_new)
#view(tb5_new[1:10, ])
#tb_new[1:10]
tb5_new <- tb5_new[1:10, ]
View(tb5_new)
tb5_new%>%
knitr::kable(caption = "Tabela 5 - Principais produtos exportados pela RMC em 2021 (valores em milh??es de USD/FOB).", digits = 2, align = rep('c', 6))%>%
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)%>%
column_spec(1, bold = T)
# Tabela 6 - Principais produtos Exportados, Acumulado ano_atual
tb6<- sp_trade %>%
filter(CO_ANO==ano_atual-1 & CO_MES > mes_num |
CO_ANO==ano_atual & CO_MES <= mes_num |
CO_ANO==ano_atual-2 & CO_MES > mes_num |
CO_ANO==ano_atual-1 & CO_MES <= mes_num,
RMC == 1)  %>%
mutate(Periodo = case_when(CO_ANO==ano_atual-1 & CO_MES > mes_num | CO_ANO==ano_atual & CO_MES <= mes_num ~ "22/21",
CO_ANO == ano_atual-2 & CO_MES > mes_num | CO_ANO == ano_atual-1 & CO_MES <= mes_num ~ "21/20")) %>%
left_join(pci_db) %>%
group_by(SH4, SH4_N, `Grau de Complexidade`, Periodo) %>%
summarise_at(c("VL_FOB_IMP"),sum,na.rm=TRUE) %>%
pivot_wider(.,
names_from = Periodo,
values_from = c(`VL_FOB_IMP`)) %>%
ungroup() %>%
mutate( NCM=SH4,
Produto=SH4_N,
`Valor Imp. 22`=round(`22/21`/1000000,2),
`Var. % 21/22`= round((`22/21`- `21/20`)/`21/20`,4)) %>%
select(NCM,Produto,
`Valor Imp. 22`,`Var. % 21/22`,
`Grau de Complexidade`)
tb6_new <- tb6[order(tb6$`Valor Imp. 22`, decreasing = TRUE), ]
#view(tb6_new[1:10, ])
#tb6_new[1:10, ]
# Adicionando %
tb6_new$`Var. % 21/22` = tb6_new$`Var. % 21/22`*100
tb6_new$`Var. % 21/22` = paste0(tb6_new$`Var. % 21/22`, '%')
#view(tb6_new[1:10, ])
#tb6_new[1:10, ]
tb6_new <- tb6_new[1:10, ]
View(tb6_new)
head(pci_db)
head(sp_trade)
tb2<- sp_trade %>%
filter(CO_MES==mes_num, RMC==1, CO_ANO>=ano_atual-1) %>%
left_join(pci_db)  %>%
mutate(`Grau de Complexidade`=replace_na(`Grau de Complexidade`,"IN")) %>%
group_by(`Grau de Complexidade`, CO_ANO) %>%
summarise("Valor das Exp."=sum(VL_FOB_EXP,na.rm=T)) %>%
pivot_wider(.,
id_cols = `Grau de Complexidade`,
names_from = CO_ANO,
values_from = c(`Valor das Exp.`)) %>%
ungroup() %>%
mutate(paste("Valor das Exp.", `r format(Sys.time()-13*2.628e+6, '%m/%Y')`) = round(`ano_ant`/1000000,2)) %>%
paste("Valor das Exp.", `r format(Sys.time()-13*2.628e+6, '%m/%Y')`)
`r format(Sys.time()-13*2.628e+6, '%m/%Y')`
`r format(Sys.time()-13*2.628e+6, '%m/%Y')`
